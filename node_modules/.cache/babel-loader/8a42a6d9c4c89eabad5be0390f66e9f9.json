{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { useFetch } from './customHooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const [data, fetchItem, isLoading, error] = useFetch(\"POST\");\n  useEffect(() => {\n    fetchItem();\n    const loadedTasks = [];\n\n    for (const taskKey in data) {\n      loadedTasks.push({\n        id: taskKey,\n        text: data[taskKey].text\n      });\n    }\n\n    setTasks(loadedTasks);\n  }, [fetchItem, data]);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zFYu//l8YeWiZLtXJdGfjsYl5PQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useFetch","App","tasks","setTasks","data","fetchItem","isLoading","error","loadedTasks","taskKey","push","id","text","taskAddHandler","task","prevTasks","concat","fetchTasks"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAAQC,QAAR,QAAuB,wBAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACO,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,KAA7B,IAAsCP,QAAQ,CAAC,MAAD,CAApD;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,SAAS;AACT,UAAMG,WAAW,GAAG,EAApB;;AAEA,SAAK,MAAMC,OAAX,IAAsBL,IAAtB,EAA4B;AAC1BI,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEF,OAAN;AAAeG,QAAAA,IAAI,EAAER,IAAI,CAACK,OAAD,CAAJ,CAAcG;AAAnC,OAAjB;AACD;;AAEDT,IAAAA,QAAQ,CAACK,WAAD,CAAR;AACD,GATQ,EASN,CAACH,SAAD,EAAYD,IAAZ,CATM,CAAT;;AAaA,QAAMS,cAAc,GAAIC,IAAD,IAAU;AAC/BX,IAAAA,QAAQ,CAAEY,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEX,KADT;AAEE,MAAA,OAAO,EAAEI,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEU;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GArCQhB,G;UAKqCD,Q;;;KALrCC,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport {useFetch} from './customHooks/useFetch'\n\nfunction App() {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const [data, fetchItem, isLoading, error] = useFetch(\"POST\")\n\n\n\n  useEffect(() => {\n    fetchItem()\n    const loadedTasks = [];\n\n    for (const taskKey in data) {\n      loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n    }\n\n    setTasks(loadedTasks);\n  }, [fetchItem, data])\n\n\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}