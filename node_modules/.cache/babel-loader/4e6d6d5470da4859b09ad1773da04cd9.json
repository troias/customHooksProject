{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { useFetch } from './customHooks/useFetch';\nimport { addr } from './customHooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const {\n    fetchItem,\n    isLoading,\n    error\n  } = useFetch({\n    url: addr\n  }, transformTasks);\n\n  const transformTasks = tasksObj => {\n    const loadedTasks = [];\n\n    for (const taskKey in tasksObj) {\n      loadedTasks.push({\n        id: taskKey,\n        text: tasksObj[taskKey].text\n      });\n    }\n\n    setTasks(loadedTasks);\n  };\n\n  useEffect(() => {\n    fetchItem();\n  }, [data]);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"jXZLaoK85gVyAChhXV0yp12GM+8=\", false, function () {\n  return [useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useFetch","addr","App","tasks","setTasks","fetchItem","isLoading","error","url","transformTasks","tasksObj","loadedTasks","taskKey","push","id","text","data","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,IAAT,QAAqB,wBAArB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM;AAAEQ,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAkCP,QAAQ,CAC9C;AACEQ,IAAAA,GAAG,EAAEP;AADP,GAD8C,EAG3CQ,cAH2C,CAAhD;;AAMF,QAAMA,cAAc,GAAIC,QAAD,IAAc;AACnC,UAAMC,WAAW,GAAG,EAApB;;AAEA,SAAK,MAAMC,OAAX,IAAsBF,QAAtB,EAAgC;AAC9BC,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEF,OAAN;AAAeG,QAAAA,IAAI,EAAEL,QAAQ,CAACE,OAAD,CAAR,CAAkBG;AAAvC,OAAjB;AACD;;AAEDX,IAAAA,QAAQ,CAACO,WAAD,CAAR;AACD,GARD;;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACW,IAAD,CAFM,CAAT;;AAMA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/Bd,IAAAA,QAAQ,CAAEe,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEd,KADT;AAEE,MAAA,OAAO,EAAEG,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEF;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWC;;GAzCQH,G;UAIiCF,Q;;;KAJjCE,G;AA2CT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { useFetch } from './customHooks/useFetch'\nimport { addr } from './customHooks/useFetch'\n\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([]);\n\n  const { fetchItem, isLoading, error } = useFetch(\n    {\n      url: addr\n    }, transformTasks)\n\n\nconst transformTasks = (tasksObj) => {\n  const loadedTasks = [];\n\n  for (const taskKey in tasksObj) {\n    loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n  }\n\n  setTasks(loadedTasks);\n}\n\nuseEffect(() => {\n  fetchItem()\n}, [data])\n\n\n\nconst taskAddHandler = (task) => {\n  setTasks((prevTasks) => prevTasks.concat(task));\n};\n\nreturn (\n  <React.Fragment>\n    <NewTask onAddTask={taskAddHandler} />\n    <Tasks\n      items={tasks}\n      loading={isLoading}\n      error={error}\n      onFetch={fetchItem}\n    />\n  </React.Fragment>\n)\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}