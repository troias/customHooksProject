{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nexport const addr = 'https://react-http-1-f6f8f-default-rtdb.firebaseio.com/tasks.json, method = \"GET\"';\nexport const useFetch = async () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState({});\n  const fetchItem = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      let resp = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.header : {},\n        body: requestConfig.headers ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!resp.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await resp.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, [applyData]);\n  return {\n    isLoading,\n    error,\n    fetchItem\n  };\n};\n\n_s(useFetch, \"aF+N2eNcxxg7K5JZPLs5RBT78nY=\");","map":{"version":3,"sources":["/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/customHooks/useFetch.js"],"names":["React","useState","useEffect","useCallback","addr","useFetch","isLoading","setIsLoading","error","setError","data","setData","fetchItem","requestConfig","applyData","resp","fetch","url","method","headers","header","body","JSON","stringify","ok","Error","json","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAO,MAAMC,IAAI,GAAG,mFAAb;AAEP,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAAA;;AAEhC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAES,IAAF,EAAQC,OAAR,IAAmBV,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAMW,SAAS,GAAGT,WAAW,CAAC,OAAOU,aAAP,EAAsBC,SAAtB,KAAqC;AAE/DP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,QAAI;AAEA,UAAIM,IAAI,GAAG,MAAMC,KAAK,CAClBH,aAAa,CAACI,GADI,EACC;AACfC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADvC;AAEfC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACO,MAAtC,GAA+C,EAFzC;AAGfC,QAAAA,IAAI,EAAER,aAAa,CAACM,OAAd,GAAwBG,IAAI,CAACC,SAAL,CAAeV,aAAa,CAACQ,IAA7B,CAAxB,GAA6D;AAHpD,OADD,CAAtB;;AAQA,UAAI,CAACN,IAAI,CAACS,EAAV,EAAc;AACV,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,YAAMf,IAAI,GAAG,MAAMK,IAAI,CAACW,IAAL,EAAnB;AAEAZ,MAAAA,SAAS,CAACJ,IAAD,CAAT;AAGH,KAnBD,CAmBE,OAAOiB,GAAP,EAAY;AACVlB,MAAAA,QAAQ,CAACkB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GA5B4B,EA4B1B,CAACO,SAAD,CA5B0B,CAA7B;AA8BA,SAAO;AACHR,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHI,IAAAA;AAHG,GAAP;AAKH,CAzCM;;GAAMP,Q","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\n\r\nexport const addr = 'https://react-http-1-f6f8f-default-rtdb.firebaseio.com/tasks.json, method = \"GET\"'\r\n\r\nexport const useFetch = async () => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [ data, setData] = useState({})\r\n\r\n    const fetchItem = useCallback(async (requestConfig, applyData ) => {\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n\r\n            let resp = await fetch(\r\n                requestConfig.url, {\r\n                    method: requestConfig.method ? requestConfig.method : \"GET\",\r\n                    headers: requestConfig.headers ? requestConfig.header : {} , \r\n                    body: requestConfig.headers ? JSON.stringify(requestConfig.body) : null\r\n                }\r\n                )\r\n\r\n            if (!resp.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await resp.json();\r\n\r\n            applyData(data)\r\n\r\n        \r\n        } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false);\r\n    }, [applyData])\r\n   \r\n    return {\r\n        isLoading,\r\n        error,\r\n        fetchItem\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}