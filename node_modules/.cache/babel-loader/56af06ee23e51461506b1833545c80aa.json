{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useFetch = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      console.log(\"data\", data);\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    sendRequest,\n    isLoading,\n    error\n  };\n};\n\n_s(useFetch, \"FFcdbk+kTfFKRpY6eKN2uj4p9Os=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/customHooks/useFetch.js"],"names":["useState","useCallback","useFetch","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,WAAW,GAAGN,WAAW,CAAC,OAAOO,aAAP,EAAsBC,SAAtB,KAAoC;AAClEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAACI,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEP,aAAa,CAACO,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeT,aAAa,CAACO,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,IAApB;AACAX,MAAAA,SAAS,CAACW,IAAD,CAAT;AACD,KAdD,CAcE,OAAOI,GAAP,EAAY;AACZlB,MAAAA,QAAQ,CAACkB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArB8B,EAqB5B,EArB4B,CAA/B;AAuBA,SAAO;AACLG,IAAAA,WADK;AAELJ,IAAAA,SAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAhCD;;GAAMH,Q;;AAkCN,eAAeA,QAAf","sourcesContent":["import { useState, useCallback } from \"react\"\r\n\r\nconst useFetch = () => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\r\n    setIsLoading(true)\r\n    setError(null)\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : \"GET\",\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\")\r\n      }\r\n\r\n      const data = await response.json()\r\n      console.log(\"data\", data)\r\n      applyData(data)\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\")\r\n    }\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  return {\r\n    sendRequest,\r\n    isLoading,\r\n    error,\r\n  }\r\n}\r\n\r\nexport default useFetch\r\n"]},"metadata":{},"sourceType":"module"}