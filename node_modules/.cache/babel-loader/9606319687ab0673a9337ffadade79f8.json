{"ast":null,"code":"var _jsxFileName = \"/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { useFetch } from './customHooks/useFetch';\nimport { addr } from './customHooks/useFetch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const {\n    isLoading,\n    error,\n    fetchItem: fetchTasks\n  } = useFetch();\n  useEffect(() => {\n    const transformTasks = tasksObj => {\n      const loadedTasks = [];\n\n      for (const taskKey in tasksObj) {\n        loadedTasks.push({\n          id: taskKey,\n          text: tasksObj[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    };\n\n    fetchTasks({\n      url: addr\n    }, transformTasks);\n  }, [fetchTasks]);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: fetchTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"NYOOWkiFj1QWbQSV0HXy+GQ+dk0=\", false, function () {\n  return [useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useFetch","addr","App","tasks","setTasks","isLoading","error","fetchItem","fetchTasks","transformTasks","tasksObj","loadedTasks","taskKey","push","id","text","url","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,IAAT,QAAqB,wBAArB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEQ,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,SAAS,EAAEC;AAA/B,MAA8CR,QAAQ,EAA5D;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,cAAc,GAAIC,QAAD,IAAc;AACnC,YAAMC,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBF,QAAtB,EAAgC;AAC9BC,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEL,QAAQ,CAACE,OAAD,CAAR,CAAkBG;AAAvC,SAAjB;AACD;;AAEDX,MAAAA,QAAQ,CAACO,WAAD,CAAR;AACD,KARD;;AAUAH,IAAAA,UAAU,CAAC;AAAEQ,MAAAA,GAAG,EAAEf;AAAP,KAAD,EAAgBQ,cAAhB,CAAV;AACD,GAZQ,EAYN,CAACD,UAAD,CAZM,CAAT;;AAgBA,QAAMS,cAAc,GAAIC,IAAD,IAAU;AAC/Bd,IAAAA,QAAQ,CAAEe,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEd,KADT;AAEE,MAAA,OAAO,EAAEE,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEE;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAvCQN,G;UAG6CF,Q;;;KAH7CE,G;AAyCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport { useFetch } from './customHooks/useFetch'\nimport { addr } from './customHooks/useFetch'\n\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([]);\n  const { isLoading, error, fetchItem: fetchTasks } = useFetch()\n\n\n\n\n  useEffect(() => {\n    const transformTasks = (tasksObj) => {\n      const loadedTasks = [];\n  \n      for (const taskKey in tasksObj) {\n        loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n      }\n  \n      setTasks(loadedTasks);\n    }\n  \n    fetchTasks({ url: addr }, transformTasks)\n  }, [fetchTasks])\n\n\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={fetchTasks}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}