{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nconst addr = 'https://react-http-1-f6f8f-default-rtdb.firebaseio.com/tasks.json, method = \"GET\"';\nexport const useFetch = async (method = 'GET', taskText, address = addr) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState({});\n  setIsLoading(true);\n  setError(null);\n\n  try {\n    let resp;\n\n    if (method === \"POST\") {\n      resp = await fetch(address, {\n        method: 'POST',\n        body: JSON.stringify({\n          text: taskText\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    } else {\n      resp = await fetch(address);\n    }\n\n    if (!resp.ok) {\n      throw new Error('Request failed!');\n    }\n\n    const data = await resp.json();\n    setData(data);\n  } catch (err) {\n    setError(err.message || 'Something went wrong!');\n  }\n\n  setIsLoading(false);\n  return [data, isLoading, error];\n};\n\n_s(useFetch, \"uQgBIBDQAWjdaId4V57g8YC6zUY=\");","map":{"version":3,"sources":["/home/troias/udemy/project-6/04-onwards-to-a-more-realistic-example/src/customHooks/useFetch.js"],"names":["React","useState","useEffect","addr","useFetch","method","taskText","address","isLoading","setIsLoading","error","setError","data","setData","resp","fetch","body","JSON","stringify","text","headers","ok","Error","json","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,MAAMC,IAAI,GAAG,mFAAb;AAEA,OAAO,MAAMC,QAAQ,GAAG,OAAOC,MAAM,GAAG,KAAhB,EAAuBC,QAAvB,EAAiCC,OAAO,GAAGJ,IAA3C,KAAqD;AAAA;;AAEzE,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAEW,IAAF,EAAQC,OAAR,IAAmBZ,QAAQ,CAAC,EAAD,CAAjC;AAIIQ,EAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,EAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,MAAI;AAEA,QAAIG,IAAJ;;AAEA,QAAIT,MAAM,KAAK,MAAf,EAAuB;AACnBS,MAAAA,IAAI,GAAG,MAAMC,KAAK,CACdR,OADc,EACL;AACTF,QAAAA,MAAM,EAAE,MADC;AAETW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,IAAI,EAAEb;AAAR,SAAf,CAFG;AAGTc,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAHA,OADK,CAAlB;AAQH,KATD,MASO;AACHN,MAAAA,IAAI,GAAG,MAAMC,KAAK,CACdR,OADc,CAAlB;AAEH;;AAGD,QAAI,CAACO,IAAI,CAACO,EAAV,EAAc;AACV,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,UAAMV,IAAI,GAAG,MAAME,IAAI,CAACS,IAAL,EAAnB;AAEAV,IAAAA,OAAO,CAACD,IAAD,CAAP;AAGH,GA5BD,CA4BE,OAAOY,GAAP,EAAY;AACVb,IAAAA,QAAQ,CAACa,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACH;;AACDhB,EAAAA,YAAY,CAAC,KAAD,CAAZ;AAEA,SAAO,CAAEG,IAAF,EAAQJ,SAAR,EAAmBE,KAAnB,CAAP;AAEH,CA9CE;;GAAMN,Q","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst addr = 'https://react-http-1-f6f8f-default-rtdb.firebaseio.com/tasks.json, method = \"GET\"'\r\n\r\nexport const useFetch = async (method = 'GET', taskText, address = addr,) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const [ data, setData] = useState({})\r\n\r\n \r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n\r\n            let resp\r\n\r\n            if (method === \"POST\") {\r\n                resp = await fetch(\r\n                    address, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ text: taskText }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                })\r\n            } else {\r\n                resp = await fetch(\r\n                    address)\r\n            }\r\n\r\n\r\n            if (!resp.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n\r\n            const data = await resp.json();\r\n\r\n            setData(data)\r\n\r\n        \r\n        } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false);\r\n\r\n        return [ data, isLoading, error];\r\n\r\n    }\r\n   \r\n  \r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}